name: DocSAF CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
        
    - name: Run Black formatter check
      run: black --check --diff src/ tests/
      
    - name: Run isort import sorting check  
      run: isort --check-only --diff src/ tests/
      
    - name: Run flake8 linting
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run mypy type checking (allow failures)
      run: mypy src/ || true

  test-cpu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Run tests on CPU
      run: |
        pytest tests/ -v --tb=short -x
      env:
        CUDA_VISIBLE_DEVICES: ""  # Force CPU-only testing
        
    - name: Test CLI help messages
      run: |
        python -m src.docsaf.infer_once --help
        python -m src.docsaf.eval_harness --help
        
    - name: Test two-knob constraint enforcement
      run: |
        # Create invalid parameters file
        python -c "import torch; torch.save({'alpha': 1.2, 'radius': 7.0, 'extra': 3.14}, 'bad_params.pt')"
        
        # Test that CLI rejects extra parameters
        ! python -m src.docsaf.infer_once --image demo/sample_doc.png --params bad_params.pt || exit 1
        
        # Cleanup
        rm -f bad_params.pt

  test-integration:
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-cpu]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Test surrogate loading (CPU)
      run: |
        python scripts/test_surrogates.py
      env:
        CUDA_VISIBLE_DEVICES: ""
        
    - name: Test evaluation harness (CPU, small dataset)
      run: |
        # Create test parameters
        python -c "import torch; torch.save({'alpha': 1.2, 'radius': 7.0}, 'test_params.pt')"
        
        # Run evaluation on test data (should work with CPU)
        python -m src.docsaf.eval_harness --data data/test_docs --params test_params.pt --output ci_eval_test --device cpu
        
        # Check that reports were generated
        test -f ci_eval_test/evaluation_report.md
        test -f ci_eval_test/evaluation_report.csv
        
        # Cleanup
        rm -f test_params.pt
        rm -rf ci_eval_test/

  security-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit security linter
      run: bandit -r src/ -f json -o bandit-report.json || true
      
    - name: Run Safety dependency check
      run: safety check --json --output safety-report.json || true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Validate README and documentation
      run: |
        # Check that README exists and has key sections
        test -f README.md
        grep -q "# DocSAF" README.md
        grep -q "## Installation" README.md
        grep -q "## Quickstart" README.md
        
        # Check that config file is valid YAML
        python -c "import yaml; yaml.safe_load(open('configs/default.yaml'))"
        
        # Check that demo notebook exists
        test -f scripts/demo_notebook.ipynb
        
    - name: Check project structure
      run: |
        # Verify key directories and files exist
        test -d src/docsaf/
        test -d tests/
        test -d demo/
        test -d data/test_docs/
        test -f pyproject.toml
        test -f .gitignore
        
        # Check that demo images exist
        test -f demo/sample_doc.png
        test -f demo/form.png
        test -f demo/receipt.png
        
        # Check that download script exists and is executable
        test -x scripts/download_surrogates.sh
